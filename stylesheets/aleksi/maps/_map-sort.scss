// =============================================================================
// =ALEKSI - MAP-SORT
// =============================================================================
////
//// @group aleksi-maps
//// @author [Yoannis Jamar](http://yoannis.me)

@import "SassyLists";
@import "sassy-maps";
@import "aleksi/general/throw";
@import "aleksi/general/default-to";
@import "aleksi/maps/is-map";

// =map-sort-values( $map[, $order ])
// -----------------------------------------------------------------------------
/// Orders a map's keys according to a given, ordered list of values. If no
/// order is specified, the alphabetic order of the map's values will be used.
/// **Note**: items with a value that is not in the ordered list will be added
/// at the end of the resulting map, in the same order as in the original map.
///
/// @param {type|...} $name [default] - Description
///
/// @return {type|...} - Description
/// @throw Error if `$map` is not a map
///
/// @access public
/// @since 0.1.0
///
/// @todo Manage duplicated values.

@function map-sort-values( $map, $order: null )
{
  @if not is-map($map) {
    @return throw-error('map-sort-keys():: $map must be a map, was #{inspect($map)}.');
  }

  $keys: map-keys($map);
  $values: map-values($map);
  $order: default-to($order, sl-sort($values));

  @each $val in $order {
    $i: index($values, $val);

    @if index($values, $val) {
      $res: map-set( $res, nth($keys, $i), $val);
      $keys: sl-remove-nth($keys, $i);
    }
  }

  // include leftovers at the end
  @each $key in $keys {
    $res: map-set($res, $key, map-get($map, $key));
  }

  @return $res;
}

// =map-sort-keys( $map[, $order ])
// -----------------------------------------------------------------------------
/// Orders a map's keys according to a given, ordered list of keys. If no order
/// is specified, the keys will be ordered alphabetically.
/// **Note**: keys that are not in the ordered list will be added at the end of
/// the resulting map, in the same order as in the original map.
///
/// @param {map} $map - The map to order.
/// @param {list} $order (alphabetic order) - An ordered list of key names.
///
/// @return {type|...} - The map with it's keys in the same order as `$order`.
/// @throw Error if `$map` is not a map.
/// @throw Error if `$order` is not a list, a string, null or false.
///
/// @access public
/// @since 0.1.0

@function map-sort-keys( $map, $order: null )
{
  @if not is-map($map) {
    @return throw-error('map-sort-keys():: $map must be a map, was #{inspect($map)}.');
  }

  // allow lists and single strings for `$order`
  @if not is-of-type($order, 'list' 'string' 'null') {
    @return throw-error('map-sort-keys():: $order must be a list or a single string. Was #{inspect($order)}.');
  }

  $keys: map-keys($map);
  $order: default-to($order, sl-sort($keys));
  $res: ();

  @each $key in $order {
    @if index($keys, $key) {
      $res: map-set($res, $key, map-get($map, $key));
    }
  }

  // include leftovers at the end
  @if length($res) < length($map) {
    $res: map-merge($res, $map);
  }

  @return $res;
}

// =map-sort( $map[, $order ])
// -----------------------------------------------------------------------------
/// @alias map-sort-keys
///
/// @access public
/// @since 0.1.0

@function map-sort($map, $order: null)
{
  @if type-of($map) != 'map' {
    @return throw-error('map-sort():: $map must be a map, was #{inspect($map)}.');
  }

  $keys: sl-sort(map-keys($map));
  $res: ();

  @each $key in $keys {
    $res: map-set($res, $key, map-get($map, $key));
  }

  @return $res;
}