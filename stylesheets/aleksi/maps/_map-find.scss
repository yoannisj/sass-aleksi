// =============================================================================
// =ALEKSI - MAP-FIND
// =============================================================================
////
//// @group aleksi-maps
//// @author [Yoannis Jamar](http://yoannis.me)

@import "aleksi/general/throw";
@import "aleksi/maps/is-map";

// =map-find-key( $map, $value )
// -----------------------------------------------------------------------------
/// Returns the key under which a given value is stored in a map. If the value
/// is found multiple times, the first key for it will be returned. Returns
/// `null` if the value wasn't found.
///
/// @param {map} $map - The map to search in.
/// @param {any} $value - The value to search for.
///
/// @return {string} - The first map's key under which `$value` is stored.
/// @throw Error if `$map` is not a map.
///
/// @example scss
///   $foo: map-find('a': 10, 'b': 5, 'c': 3, 5);
///     // => 'b'
///   $bar: map-find('a': 10, 'b': 5, 'c': 3, 'd': 5, 5);
///     // => 'b'
///
/// @access public
/// @since 0.1.0

@function map-find-key( $map, $value )
{
  @if not is-map($map) {
    @return throw-error('map-find-key():: $map must be a map, was #{inspect($map)}.');
  }

  @each $key, $val in $map {
    @if $val == $value {
      @return $key;
    }
  }

  @return null;
}

// =map-find( $map, $value )
// -----------------------------------------------------------------------------
/// @alias map-find-key
///
/// @access public
/// @since 0.1.0

@function map-find( $map, $value )
{
  @return map-find-key($map, $value);
}

// =map-find-keys( $map, $value )
// -----------------------------------------------------------------------------
/// Returns a list with all the keys in a map that hold the given value.
///
/// @param {map} $map - The map to search in.
/// @param {any} $value - The value to search for
///
/// @return {list} - The list of keys that hold `$value` in `$map`.
/// @throw Error if `$map` is not a map.
///
/// @example scss
///   $foo: map-find-keys( 'a': 'foo', 'b': 'bar', 'c': 'foo', 'd': 'baz', 'foo');
///     // => 'a' 'b'
///   $bar: map-find-keys( 'a': 'foo', 'b': 'bar', 'c': 'baz', 'foo');
///     // => 'a';
///   $bar-type: type-of($bar);
///     // => list
///
/// @access public
/// @since 0.1.0

@function map-find-keys( $map, $value )
{
  @if not is-map($map) {
    @return throw-error('map-find-keys():: $map must be a map, was #{inspect($map)}.');
  }

  $keys: ();

  @each $key, $val in $map {
    @if $val == $value {
      $keys: append($keys, $key);
    }
  }

  @return $keys;
}