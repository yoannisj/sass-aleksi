// =============================================================================
// =ALEKSI - MEMO
// =============================================================================
//// @group aleksi-general
//// @author [Yoannis Jamar](http://yoannis.me)

$__memo-table__: () !default;

@import "SassyLists";
@import "aleksi/general/throw";
@import "aleksi/arglists/arglist-prepend";
@import "aleksi/maps/map-set-deep";
@import "aleksi/maps/map-has-deep-key";
@import "aleksi/maps/map-get-deep";
@import "aleksi/maps/map-remove-deep";

// =memo-set( $ns, $key, $value)
// -----------------------------------------------------------------------------
/// Stores a value in the memoization table, under the given key.
///
/// @param {string} $ns - the namespace of the module storing the memo value
/// @param {string} $key - the key under which to store the memo value
/// @param {any} $value - the value to set in the memoization table
///
/// @return {bool} - true
///
/// @api public
/// @since 0.4.0

@function memo-set( $ns, $keys... )
{
  // $ns is the first-level key
  $keys: arglist-prepend($keys, $ns);

  @debug inspect($keys) + ' / ' + length($keys);

  // store value in the list of keys
  $__memo-table__: map-set-deep($__memo-table__, $keys...) !global;

  // return $value, which is the last argument
  @return nth($keys, -1);
}

// =memo-clear( $ns[, $key ])
// -----------------------------------------------------------------------------
/// Clears all values currently stored under given namespace or key by removing
/// it from the memoization table. If no key is given, the whole namespace will
/// be cleared.
///
/// @param {string} $ns - the namespace to remove from the memoization table
/// @param {string} $keys... - the path of nested key(s) to remove
///
/// @return {bool} - true
///
/// @api public
/// @since 0.4.0

@function memo-clear( $ns, $keys... )
{
  // namespace is the first-level key
  $keys: arglist-prepend($keys, $ns);

  // get the longest path of keys that actually exist
  $i: length($keys);
  @while $i > 1 and not map-has-deep-key($__memo-table__, $keys...)
  {
    $i: $i - 1;
    $keys: sl-slice($keys, 1, $i);
  }

  // if only namespace was given
  @if $i == 1 {
    $__memo-table__: map-remove($__memo-table__, nth($keys, 1)) !global;
  }

  // if path of keys was found
  @if $i > 0 {
    $__memo-table__: map-remove-deep($__memo-table__, $keys...) !global;
  }

  @return true;
}

// =memo-has( $ns, $key)
// -----------------------------------------------------------------------------
/// Checks whether a value is stored in the memoization table.
///
/// @param {string} $ns - the namespace of the module storing the memo value
/// @param {string} $key - the key under which the memo value should be stored
///
/// @return {bool} - whether a value was stored already or not
///
/// @api public
/// @since 0.4.0

@function memo-has( $ns, $keys... )
{
  // $ns is the first-level key
  $keys: arglist-prepend($keys, $ns);

  @return map-has-deep-key($__memo-table__, $keys...);
}

// =memo-get( $ns, $key, $value)
// -----------------------------------------------------------------------------
/// Retrieves a value previously stored in the memoization table using
/// 'memo-set'.
/// **Note**: 'memo-get()' will throw an error if no value was found, so make
/// sure you always test if a value has been stored before using 'memo-has'.
///
/// @param {string} $ns - the namespace of the module storing the memo value
/// @param {string} $key - the key under which the memo value should be stored
///
/// @return {any} - the value that was stored under the given $ns and $key
///
/// @throw {error} - if no value was found
///
/// @api public
/// @since 0.4.0

@function memo-get( $ns, $keys... )
{
  // $ns is the first-level key
  $keys: arglist-prepend($keys, $ns);

  // return value that was stored using 'memo-set'
  @if memo-has($ns, $keys...) {
    @return map-get-deep($__memo-table__, $keys...);
  }

  // build path to show in error message
  $path: '#{$ns}';
  @each $key in sl-slice($keys, 2) {
    $path: '#{$path}->#{$key}';
  }

  $e: throw-error('memo-get(): no value was found for `#{$path}` â€“ always test with `memo-has()` before calling `memo-get()`');
  @return '__none__';
}