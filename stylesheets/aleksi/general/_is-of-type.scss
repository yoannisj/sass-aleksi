// =============================================================================
// =ALEKSI - IS-OF-TYPE
// =============================================================================
////
//// @group aleksi-general
//// @author [Yoannis Jamar](http://yoannis.me)

@import "SassyLists";
@import "aleksi/general/throw";
@import "aleksi/lists/is-list";
@import "aleksi/maps/is-map";

// =is-of-type( $value, $type )
// -----------------------------------------------------------------------------
/// Checks if a value is of the given type. Also accepts a list of types to
/// allow multiple types.
/// **Note**: delegates to `is-list()` so arglists are also considered to be of
/// type `list`.
/// **Note**: delegates to `is-map()` so the empty map `()` is also considered
/// to be of type `map`.
///
/// @param {any} $value - The value to analyze.
/// @param {any} $type - The type(s) to check `$value` against.
///
/// @return {bool} - Whether the value's type corresponds to `$type`.
///
/// @example scss
///   $foo: is-of-type('hello', 'string');
///     // => true
///   $bar: is-of-type('hello', number string null);
///     // => true
///   $baz: is-of-type(10, string bool null);
///     // => false
///   $wiz: is-of-type((), map);
///     // => true
///
/// @access public
/// @since 0.1.0

@function is-of-type( $value, $type )
{
  // accept a list of multiple types to test against
  @if is-list($type) {
    @each $t in $type {
      @if is-of-type($value, $t) {
        @return true;
      }
    }
    // stop if none of the types in $type correspond
    @return false;
  }

  // accept the unquoted `null` as a data-type
  @if $type == null {
    @return if( $value == null, true, false );
  }

  // only test against valid type names
  @else if type-of($type) != string {
    $e: throw-error('$type must be a string or a list of strings, was #{inspect($type)}.');
  }

  @else if $type == list {
    @return is-list($value);
  }

  @else if $type == map {
    @return is-map($value);
  }

  @return (type-of($value) == $type);
}