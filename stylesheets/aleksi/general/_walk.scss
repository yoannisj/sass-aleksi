// =============================================================================
// =ALEKSI - WALK
// =============================================================================
//// @group General
//// @author [Yoannis Jamar](http://yoannis.me)

@import "SassyCast";
@import "aleksi/general/throw";
@import "aleksi/lists/list-walk";
@import "aleksi/maps/map-walk";

// =walk( $value, $func[, $args... ])
// -----------------------------------------------------------------------------
/// Applies the given function to each value inside a list, arglist or a map.
///
/// @param {list|arglist|map} $value [default] - The value to walk over
/// @param {string} $func - The name of the function to apply to each value.
/// @param {arglist} $args... - Additional arguments passed to '$func`.
///
/// @return {list|arglist|map} - The list, arglist or map with modified values.
///
/// @example scss
///   $foo: map-walk(('foo': 'bar', 'bar': 'baz'), 'to-upper-case');
///     // => ('foo': 'BAR', 'bar': 'BAZ')
///   $bar: list-walk('foo' 'bar' 'baz', 'to-upper-case');
///     // => 'FOO' 'BAR' 'BAZ'
///   $baz: list-walk('foo', 'to-upper-case');
///     // => 'FOO'
///
/// @access public
/// @since 0.1.0
///
/// @todo Description

@function walk( $value, $func, $args... )
{
  @if is-of-type($value, 'list' 'arglist') {
    @return list-walk($value, $func, $args...);
  }

  @else if is-of-type($value, 'map') {
    @return map-walk($value, $func, $args...);
  }

  $e: throw-warning('Walking over a simple value #{inspect($value)} â€” resulting value will be returned inside a list.');
  @return list-walk(to-list($value), $func, $args...);
}