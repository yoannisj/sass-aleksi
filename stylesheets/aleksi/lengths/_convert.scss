// =============================================================================
// =ALEKSI - CONVERT-LENGTH
// =============================================================================
//// @group aleksi-lengths
//// @author [Yoannis Jamar](http://yoannis.me)
//// @author [Chris Eppstein](http://chriseppstein.github.io/)

@import "aleksi/lengths/strip-unit";

// =default globals
// -----------------------------------------------------------------------------

// Base font size in pixels, if not already defined.
// Should be the same as the font-size of the body element.
$base-font-size: 16px !default;

// Root font size in pixels, if not already defined
// Should be the same as the font-size of the html element.
$root-font-size: $base-font-size !default;

// =convert-lengths( $values, $to-unit[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert all lengths in given list or map. Doesn't try to convert none-number
/// values in the list/map.
///
/// @param {list|map} $values - A css list or map with lengths to convert
/// @param {string} $to-unit - A css unit keyword, e.g. 'em', '%', 'px', etc.
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @access public
/// @since 0.2.2

@function convert-lengths($values, $to-unit, $from-context: $base-font-size, $to-context: $from-context)
{
  $res: ();

  @each $value in $values
  {
    // convert length values
    @if type-of($value) == number {
      $value: convert-length($value, $to-unit, $from-context, $to-context);
    }

    $res: append($res, $value);
  }

  @return $res;
}

// =convert-length( $length, $to-unit[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert any CSS <length> or <percentage> value to any another.
///
/// @param {number} $length - A css <length> or <percentage> value
/// @param {string} $to-unit - A css unit keyword, e.g. 'em', '%', 'px', etc.
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @return {type|...} - Description
/// @throw Description
///
/// @access public
/// @since 0.1.0

@function convert-length(
  $length,
  $to-unit,
  $from-context: $base-font-size,
  $to-context: $from-context
) {
  $from-unit: unit($length);

  // Optimize for cases where `from` and `to` units are the same.
  @if $from-unit == $to-unit { @return $length; }

  // 0 is always 0
  @if (strip-unit($length) == 0) { @return 0; }

  // Context values must be in px so we can determine a conversion ratio for
  // relative units.
  @if unit($from-context) != 'px' { @warn "Paremeter $from-context must resolve to a value in pixel units."; }
  @if unit($to-context) != 'px' { @warn "Parameter $to-context must resolve to a value in pixel units."; }

  // Convert input length to pixels
  $px-length: $length;

  @if $from-unit != 'px' {
    // Convert relative units using the from-context parameter.
    @if      $from-unit == 'em'  { $px-length: $length * $from-context / 1em }
    @else if $from-unit == 'rem' { $px-length: $length * $root-font-size / 1rem }
    @else if $from-unit == '%'   { $px-length: $length * $from-context / 100% }
    @else if $from-unit == 'ex'  { $px-length: $length * $from-context / 2ex }
    // Convert absolute units using Sass' conversion table.
    @else if $from-unit == 'in'  or
             $from-unit == 'mm'  or
             $from-unit == 'cm'  or
             $from-unit == 'pt'  or
             $from-unit == 'pc'  { $px-length: 0px + $length }
    // Certain units can't be converted.
    @else if $from-unit == 'ch'  or
             $from-unit == 'vw'  or
             $from-unit == 'vh'  or
             $from-unit == 'vmin' {
      @warn "#{$from-unit} units can't be reliably converted; Returning original value.";
      @return $length;
    }
    @else {
      @warn "#{$from-unit} is an unknown length unit. Returning original value.";
      @return $length;
    }
  }

  // Convert length in pixels to the output unit
  $output-length: $px-length;
  @if $to-unit != 'px' {
    // Relative units
    @if      $to-unit == 'em'  { $output-length: $px-length * 1em / $to-context }
    @else if $to-unit == 'rem' { $output-length: $px-length * 1rem / $root-font-size }
    @else if $to-unit == '%'   { $output-length: $px-length * 100% / $to-context }
    @else if $to-unit == 'ex'  { $output-length: $px-length * 2ex / $to-context }
    // Absolute units
    @else if $to-unit == 'in'  { $output-length: 0in + $px-length }
    @else if $to-unit == 'mm'  { $output-length: 0mm + $px-length }
    @else if $to-unit == 'cm'  { $output-length: 0cm + $px-length }
    @else if $to-unit == 'pt'  { $output-length: 0pt + $px-length }
    @else if $to-unit == 'pc'  { $output-length: 0pc + $px-length }
    // Non-convertible units
    @else if $to-unit == 'ch'  or
             $to-unit == 'vw'  or
             $to-unit == 'vh'  or
             $to-unit == 'vmin' {
      @warn "#{$to-unit} units can't be reliably converted; Returning original value.";
      @return $length;
    }
    @else {
      @warn "#{$to-unit} is an unknown length unit. Returning original value.";
      @return $length;
    }
  }

  @return $output-length;
}

// =to-px( $length[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert any CSS <length> or <percentage> value to pixels.
///
/// @param {number} $length - A css <length> or <percentage> value
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @return {length} - value of '$length' in pixels
///
/// @access public
/// @since 0.3.1

@function to-px( $length, $from-context: $base-font-size, $to-context: $from-context)
{
  @return convert-length($length, 'px', $from-context, $to-context);
}

// =to-em( $length[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert any CSS <length> or <percentage> value to ems.
///
/// @param {number} $length - A css <length> or <percentage> value
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @return {length} - value of '$length' in ems
///
/// @access public
/// @since 0.3.1

@function to-em( $length, $from-context: $base-font-size, $to-context: $from-context)
{
  @return convert-length($length, 'em', $from-context, $to-context);
}

// =to-rem( $length[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert any CSS <length> or <percentage> value to rems.
///
/// @param {number} $length - A css <length> or <percentage> value
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @return {length} - value of '$length' in rems
///
/// @access public
/// @since 0.3.1

@function to-rem( $length, $from-context: $base-font-size, $to-context: $from-context)
{
  @return convert-length($length, 'rem', $from-context, $to-context);
}

// =to-percent( $length[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert any CSS <length> or <percentage> value to percentages.
///
/// @param {number} $length - A css <length> or <percentage> value
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @return {length} - value of '$length' in percentages
///
/// @access public
/// @since 0.3.1

@function to-percent( $length, $from-context: $base-font-size, $to-context: $from-context)
{
  @return convert-length($length, '%', $from-context, $to-context);
}

// =to-ex( $length[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert any CSS <length> or <percentage> value to exs.
///
/// @param {number} $length - A css <length> or <percentage> value
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @return {length} - value of '$length' in exs
///
/// @access public
/// @since 0.3.1

@function to-ex( $length, $from-context: $base-font-size, $to-context: $from-context)
{
  @return convert-length($length, 'ex', $from-context, $to-context);
}

// =to-in( $length[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert any CSS <length> or <percentage> value to inches.
///
/// @param {number} $length - A css <length> or <percentage> value
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @return {length} - value of '$length' in inches
///
/// @access public
/// @since 0.3.1

@function to-in( $length, $from-context: $base-font-size, $to-context: $from-context)
{
  @return convert-length($length, 'in', $from-context, $to-context);
}

// =to-mm( $length[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert any CSS <length> or <percentage> value to millimeters.
///
/// @param {number} $length - A css <length> or <percentage> value
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @return {length} - value of '$length' in millimeters
///
/// @access public
/// @since 0.3.1

@function to-mm( $length, $from-context: $base-font-size, $to-context: $from-context)
{
  @return convert-length($length, 'mm', $from-context, $to-context);
}

// =to-cm( $length[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert any CSS <length> or <percentage> value to centimeters.
///
/// @param {number} $length - A css <length> or <percentage> value
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @return {length} - value of '$length' in centimeters
///
/// @access public
/// @since 0.3.1

@function to-cm( $length, $from-context: $base-font-size, $to-context: $from-context)
{
  @return convert-length($length, 'cm', $from-context, $to-context);
}

// =to-pt( $length[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert any CSS <length> or <percentage> value to points.
///
/// @param {number} $length - A css <length> or <percentage> value
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @return {length} - value of '$length' in points
///
/// @access public
/// @since 0.3.1

@function to-pt( $length, $from-context: $base-font-size, $to-context: $from-context)
{
  @return convert-length($length, 'pt', $from-context, $to-context);
}

// =to-pc( $length[, $from-context, $to-context ])
// -----------------------------------------------------------------------------
/// Convert any CSS <length> or <percentage> value to picas.
///
/// @param {number} $length - A css <length> or <percentage> value
/// @param {number} $from-context [$base-font-size] - The absolute length (in px) to which `$length` refers
/// @param {number} $to-context [$from-context] - the absolute length in px to which the output value will refer.
///
/// @return {length} - value of '$length' in picas
///
/// @access public
/// @since 0.3.1

@function to-pc( $length, $from-context: $base-font-size, $to-context: $from-context)
{
  @return convert-length($length, 'pc', $from-context, $to-context);
}