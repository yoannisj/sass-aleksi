// =============================================================================
// =ALEKSI - WALK
// =============================================================================
//// @group General
//// @author [Yoannis Jamar](http://yoannis.me)

@import "SassyLists";
@import "aleksi/general/throw";
@import "aleksi/maps/map-walk";

// =walk( $list, $func[, $args... ])
// -----------------------------------------------------------------------------
/// Applies the given function to each value inside a list, arglist or a map.
/// **Note**: SassyLists offers the similar `sl-walk()` function. The difference
/// is that Aleksi's `walk()` function will delegate to `map-walk()` when the
/// first argument is a map.
/// **Note**: When passed a simple value (not a list, arglist or map), it will
/// apply the function to it and return the result inside a single item list.
///
/// @param {list|map} $list [default] - The value to walk over
/// @param {string} $func - The name of the function to apply to each value.
/// @param {arglist} $args... - Additional arguments passed to '$func`.
///
/// @return {list|map} - The list, arglist or map with modified values.
/// @throw Warning when walking over a simple value.
///
/// @example scss
///   $foo: map-walk(('foo': 'bar', 'bar': 'baz'), 'to-upper-case');
///     // => ('foo': 'BAR', 'bar': 'BAZ')
///   $bar: list-walk('foo' 'bar' 'baz', 'to-upper-case');
///     // => 'FOO' 'BAR' 'BAZ'
///   $baz: list-walk('foo', 'to-upper-case');
///     // => 'FOO'
///
/// @access public
/// @since 0.1.0

@function walk( $list, $func, $args... )
{
  @if type-of($list) == 'map' {
    @return map-walk($list, $func, $args...);
  }

  @else if is-list($list) {
    @return sl-walk($list, $func, $args...);
  }

  $e: throw-warning('Walking over a simple value #{inspect($list)} â€” resulting value will be returned inside a list.');
  @return sl-walk($list, $func, $args...);
}