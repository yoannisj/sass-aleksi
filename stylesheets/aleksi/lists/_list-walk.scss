// =============================================================================
// =ALEKSI - LIST-WALK
// =============================================================================
//// @group Lists
//// @author [Yoannis Jamar](http://yoannis.me)

@import "aleksi/general/throw";

// =list-walk( $list, $func[, $args... ])
// -----------------------------------------------------------------------------
/// Applies the given function to each item in a list. If `$list` is not a
/// list, it will assume it is a list (just like sass list functions like
/// `append` behave). The list's current value is passed as first argument to
/// the function.
///
/// @param {map} $list - The list to walk over.
/// @param {string} $func - The name of the function to apply to each value.
/// @param {arglist} $args... - Additional arguments passed to '$func`.
///
/// @return {map} - The list with modified values.
/// @throw Error `$list` must be a map.
///
/// @example scss
///   $foo: list-walk('foo' 'bar' 'baz', 'to-upper-case');
///     // => 'FOO' 'BAR' 'BAZ'
///   $bar: list-walk('foo', 'to-upper-case');
///     // => 'FOO'
///
/// @access public
/// @since 0.1.0

@function list-walk( $list, $func, $args... )
{
  @if not is-of-type($list, 'list' 'arglist') {
    @return throw-error('list-walk():: $list must be a list or arglist, was #{inspect($list)}.');
  }

  $res: ();

  @each $val in $list {
    $res: append($res, call($func, $val, $args...));
  }

  @return $res;
}