// =============================================================================
// =ALEKSI TETS - MAP-HAS-KEYS
// =============================================================================

@include describe('The map-has-keys function')
{
  @include it('should return true if a map has all the keys in a given list')
  {
    @include should(expect( map-has-keys($str-map, 'en' 'es') ), to(equal( true )));
    @include should(expect( map-has-keys($str-map, 'en') ), to(equal( true )));
    @include should(expect( map-has-keys($num-map, 'int' 'px') ), to(equal( true )));
  }

  @include it('should also return false if the map does not have one or more of the given keys')
  {
    @include should(expect( map-has-keys($str-map, 'foo' 'bar' 'baz') ), to(equal( false )));
    @include should(expect( map-has-keys($str-map, 'en' 'fr' 'es' 'wiz') ), to(equal( false )));
    @include should(expect( map-has-keys($str-map, 'foo') ), to(equal( false )));
    @include should(expect( map-has-keys($num-map, 'foo' 'bar') ), to(equal( false )));
    @include should(expect( map-has-keys($num-map, 'int' 'px' 'foo') ), to(equal( false )));
  }
}

@include describe('The map-has-deep-key')
{
  @include it('should check if the given key nesting path corresponds to a maps structure')
  {
    @debug 'nested-map :: #{inspect($nested-map)}';
    @debug 'double-nested-map :: #{inspect($double-nested-map)}';

    @include should(expect( map-has-deep-key($nested-map, 'nest', 'en') ), to(equal( true )));
    @include should(expect( map-has-deep-key($nested-map, 'nest', 'foo') ), to(equal( false )));
    @include should(expect( map-has-deep-key($double-nested-map, 'nest', 'sub-nest') ), to(equal( true )));
    @include should(expect( map-has-deep-key($double-nested-map, 'nest', 'sub-nest', 'en') ), to(equal( true )));
  }

  @include it('should only work if the path is given from the first-level on')
  {
    @include should(expect( map-has-deep-key($double-nested-map, 'sub-nest', 'en') ), to(equal( false )));
  }

  @include it('should also work when checking for a single-level path of keys')
  {
    @include should(expect( map-has-deep-key($str-map, 'en') ), to(equal( true )));
    @include should(expect( map-has-deep-key($nested-map, 'nest') ), to(equal( true )));
  }

  @include it('should be aliased as map-has-nested-key')
  {
    @include should(expect( map-has-nested-key($nested-map, 'nest', 'en') ), to(be( map-has-deep-key($nested-map, 'nest', 'en') )));
    @include should(expect( map-has-nested-key($double-nested-map, 'sub-nest', 'en') ), to(be( map-has-deep-key($double-nested-map, 'sub-nest', 'en') )));
    @include should(expect( map-has-nested-key($double-nested-map, 'nest', 'sub-nest', 'en') ), to(be( map-has-deep-key($double-nested-map, 'nest', 'sub-nest', 'en') )));
  }
}