// =============================================================================
// =ALEKSI - MAP-WALK
// =============================================================================

@include describe('The map-walk function')
{
  @include it('should call the given function on all values in a map')
  {
    @include should(expect( map-walk($str-map, 'to-upper-case') ), to(equal( $str-map-upper-case )));
    @include should(expect( map-walk($num-map, 'unit') ), to(equal( $num-map-units )));
    @include should(expect( map-walk($mix-map, 'type-of') ), to(equal( $mix-map-types )));
  }

  @include it('should accepts additional arguments and pass them over to the function')
  {
    @include should(expect( map-walk($str-map, 'str-slice', 1, 2) ), to(equal( $str-map-sliced )));
  }

  @include xit('should throw an error when passed something else than a map')
  {
    @include should(expect( map-walk($word, 'to-upper-case') ), to(equal( null )));
    @include should(expect( map-walk($str-list, 'to-upper-case') ), to(equal( null )));
  }
}

@include describe('The map-walk-keys function')
{
  @include it('should call the given function on all keys in a map')
  {
    @include should(expect( map-walk-keys($str-map, 'to-upper-case') ), to(equal( $str-map-keys-upper-case )));
  }

  @include it('should accepts additional arguments and pass them over to the function')
  {
    @include should(expect( map-walk-keys($str-map, 'str-insert', 'lang-', 1) ), to(equal( $str-map-keys-inserted )));
  }

  @include xit('should throw an error when passed something else than a map')
  {
    @include should(expect( map-walk-keys($word, 'to-upper-case') ), to(equal( null )));
    @include should(expect( map-walk-keys($str-list, 'to-upper-case') ), to(equal( null )));
  }
}