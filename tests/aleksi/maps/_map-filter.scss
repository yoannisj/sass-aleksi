// =============================================================================
// =ALEKSI TESTS - MAP-FILTER
// =============================================================================

@include describe('The map-filter function')
{
  @include it('should remove the map items where the value does not pass a given test function')
  {
    @include should(expect( map-filter($str-map, 'str-index', 'o') ), to(equal( ('en': 'hello', 'es': 'ola') )));
    @include should(expect( map-filter($str-map, 'str-index', 'a') ), to(equal( ('fr': 'salut', 'es': 'ola') )));
    @include should(expect( map-filter($str-map, 'str-index', 'a') ), not-to(equal( $str-map )));
    @include should(expect( map-filter($str-map, 'str-index', 'l') ), to(equal( $str-map )));
  }

  @include xit('should throw an error when passed invalid arguments')
  {
    @include should(expect( map-filter($str-list, 'str-index', 'a') ), to(equal( null )));
  }
}

@include describe('The map-filter-keys function')
{
  @include it('should remove the map items where the value does not pass a given test function')
  {
    @include should(expect( map-filter-keys($str-map, 'str-index', 'e') ), to(equal( ('en': 'hello', 'es': 'ola') )));
    @include should(expect( map-filter-keys($str-map-keys-inserted, 'str-index', 'lang-') ), to(equal( $str-map-keys-inserted )));
  }

  @include xit('should throw an error when passed invalid arguments')
  {
    @include should(expect( map-filter-keys($str-list, 'str-index', 'a') ), to(equal( null )));
  }
}